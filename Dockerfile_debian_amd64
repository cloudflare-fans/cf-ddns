FROM --platform=$BUILDPLATFORM ubuntu:noble AS build-env

# Set environment variable
ENV APP_NAME=cf-ddns
ENV HOME=/root
ENV GO111MODULE=on
ENV GOPROXY=https://goproxy.cn
ENV GOOS=linux
ENV GOARCH=amd64
ENV CGO_ENABLED=1
ENV CC=x86_64-linux-gnu-gcc
ENV CXX=x86_64-linux-gnu-g++
ENV GOROOT=/usr/local/go
ENV GOPATH=$HOME/go
ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# install crossbuilding gcc and g++
RUN apt update && \
    apt install -y gcc-x86-64-linux-gnu g++-x86-64-linux-gnu curl build-essential

RUN curl -L https://go.dev/dl/go1.23.0.linux-amd64.tar.gz | tar -C /usr/local -xz

RUN go version

# Copy application data into image
COPY . $GOPATH/src/$APP_NAME
WORKDIR $GOPATH/src/$APP_NAME

RUN go build -v -o $GOPATH/bin/$APP_NAME $GOPATH/src/$APP_NAME/

FROM ubuntu:noble AS pack-env

# Set environment variable
ENV APP_NAME=cf-ddns
ENV BUILD_STEP_GOPATH=/root/go

# Install .deb package build tools
RUN apt update && \
    apt install -y dpkg-dev build-essential

# Copy linux/amd64 build files
COPY ./build/debian/ ./${APP_NAME}/
COPY ./config-system.sample.yaml ./${APP_NAME}/etc/${APP_NAME}/config-system.yaml
COPY ./config.sample.yaml ./${APP_NAME}/etc/${APP_NAME}/config.yaml

# Copy only required data into this image
COPY --from=build-env $BUILD_STEP_GOPATH/bin/$APP_NAME ./${APP_NAME}/usr/local/${APP_NAME}/

# build deb file
RUN dpkg-deb --build ./${APP_NAME}/

# Sleep to keep container
CMD ["sleep", "365d"]
